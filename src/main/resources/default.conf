repli {
  exporter {
    target {
      host: "localhost",
      port: 27017,
      authDb: "admin",
    },
    destination: {
      kafka.topic.prefix: "export.",
      kafka.topic.strategy: "FromCollectionName" // FromCollectionName, FromDbAndCollectionName
    },
    parallelism: 1
  },
  importer: {
    target: {
      poolName: "connection-pool",
      validationQuery: "select version()",
      scalike.logging: {
        printUnprocessedStackTrace: false,
        warningEnabled: true,
        singleLineMode: true
      }
    },
    source: {
      kafka.topic.prefix: "export.",
      idle.timeout: {
        after: 10 seconds
        delay: 10 seconds
      }
    },
    destination: {
      sql.tableName.strategy: "FullPathStrategy", // LastNameStrategy, FullPathStrategy
      sql.tableName.separator: "_",
      sql.id.generation.strategy: "RandomIdStrategy", // RandomIdStrategy
      // id force ? should one insert ?
      sql.columns.separator: "_",
      // minMax.decoder.strategy: "MinMaxAsStringDecoderStrategy" // MinMaxAsStringDecoderStrategy
      sql.columns.id.name: "id",
      sql.columns.parentId.name: "parent_id",
      sql.columns.rootId.name: "root_id"
    }
    parallelism: {
      messageDecoding: 1,
      sqlData: 1,
      tableMerge: 1,
      commandEncoding: 1
    },
    rowGrouping: 1
  },
  schema: {
    valueKey: "value",
    typeKey: "type"
    idTypeKey: "idType",
    subtypeKey: "subtype",
    dbPointerNamespaceKey: "namespace",
    regExOptionsKey: "options",
    regExPatternKey: "pattern",
    timestampValueKey: "timestampValue"
    maxKeyValue: "Inf",
    minKeyValue: "-Inf",
    dateTimeFormat: "dd/MM/yyyy HH:mm:ss",
    exportIdCharset: "UTF-8",
    sql: {
      binary.type.suffix: "b_type",
      dbPointer.namespace.suffix: "namespace"
      regEx.options.suffix: "options"
      play.bytes.encoding: "UTF-8"
    }
  },
  sql: {
    varcharType.breakpoint.lowerBound: 255,
    varcharType.breakpoint.upperBound: 65000,
    varbinaryType.breakpoint.lowerBound: 255,
    varbinaryType.breakpoint.upperBound: 65000,
    postgre.smallint.digit.precision: 2,
    postgre.integer.digit.precision: 4,
    postgre.bigint.digit.precision: 8,
    postgre.real.bytes.precision: 4,
    postgre.double.bytes.precision: 8,
    postgre.real.digit.precision: 6,
    postgre.double.digit.precision: 15,
    postgre.numeric.digit.precision.beforeSeparator: 131072,
    postgre.numeric.digit.precision.afterSeparator: 16383
  },
  id.stringPartPrecision: 16
}